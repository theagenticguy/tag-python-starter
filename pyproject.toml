[project]
name = "tag-python-starter"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "boto3>=1.38.36",
    "loguru>=0.7.3",
    "pydantic>=2.11.7",
]

[dependency-groups]
dev = [
    "commitizen>=4.8.3",
    "mypy>=1.16.0",
    "poethepoet>=0.35.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.11.13",
]

scan = [
    "bandit>=1.8.3",
    "pip-audit>=2.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb", "**/__init__.py"]
target-version = "py313"
exclude = [
    ".venv",
    "venv",
    "**/__pycache__",
    "**/node_modules",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.ruff_cache",
    "**/.coverage",
    "**/dist",
    "**/build",
    "**/env",
    "**/.venv",
    "**/.ipynb_checkpoints",
]
force-exclude = true

[tool.ruff.lint]
exclude = ["__init__.py", "**/__init__.py"]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "C901", # too complex
    "E501", # line too long
    "E741", # ambiguous variable name
    "F402", # unused import
    "F823", # missing type stubs
    "D100", # missing docstring in public module
    "D106", # missing docstring in public function
]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

[tool.ruff.lint.isort]
lines-after-imports = 2
no-sections = true
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"**/*.ipynb" = ["F704"]
"tests/**/*.py" = ["D100", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = true
line-ending = "auto"
docstring-code-format = true

[tool.mypy]
strict = true
exclude = ["venv", ".venv"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = "--cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=85"
filterwarnings = [
    "ignore:unclosed database in <sqlite3.Connection object at:ResourceWarning",
]

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
skip_covered = true
show_missing = true
precision = 2
exclude_lines = [
    'def __repr__',
    'pragma= no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING=',
    'if typing.TYPE_CHECKING=',
    '@overload',
    '@typing.overload',
    '\(Protocol\)=$',
    'typing.assert_never',
    'assert_never',
    'if __name__ == .__main__.=',
]

[tool.coverage.paths]
include = ["src/**/*.py"]

[tool.bandit]
exclude_dirs = ["venv", "tests"]

[tool.pip-audit]
ignore = ["bandit", "semgrep"]

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "uv"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
    "src/package/__init__.py:__version__",
    "pyproject.toml:version",
]

[tool.poe]
executor.type = "uv"

[tool.poe.tasks]

# QUALITY
format = "ruff format src tests"
lint = "ruff check --fix src tests"
typecheck = "mypy src"
code-quality = { sequence = [
    "format",
    "lint",
    "typecheck",
], help = "run quality checks" }

# SECURITY
pip-audit = "pip-audit --ignore=bandit,semgrep"
bandit = "bandit src tests -c pyproject.toml -q"
semgrep = "uvx semgrep@latest --config 'p/default' --error --skip-unknown-extensions"
scan = { sequence = [
    "pip-audit",
    "bandit",
    "semgrep",
], help = "run security scans" }

# TESTING
test = { cmd = "pytest --asyncio-mode=auto -q", help = "run tests" }
cov = { cmd = "pytest --asyncio-mode=auto --cov=src --cov-report=term-missing --cov-report=xml:coverage.xml --cov-fail-under=85", help = "run tests w/ coverage + XML artefact" }
